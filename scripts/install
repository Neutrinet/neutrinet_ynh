#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
app=$YNH_APP_INSTANCE_NAME
app_user=$app

#==================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#==================================================

final_path=/var/www/$app
[[ ! -e $final_path ]] || ynh_die "The path $final_path already contains a folder"

opt_path=/opt/$app
[[ ! -e $opt_path ]] || ynh_die "The path $opt_path already contains a folder"

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app app_user $app_user
ynh_app_setting_set $app final_path $final_path
ynh_app_setting_set $app opt_path $opt_path

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression "Installing dependencies…"

ynh_install_app_dependencies git python3-openssl python3-requests

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_script_progression "Creating app's user…"

mkdir -p $final_path
ynh_system_user_create $app_user $final_path

#=================================================
# INSTALL STATIC FILE
#=================================================

ynh_script_progression "Installing static site…"

cp -r ../sources/. $final_path
chown -R $app_user:www-data $final_path
find ${final_path} -type d -exec chmod 0750 {} \;
find ${final_path} -type f -exec chmod 0640 {} \;

ynh_add_nginx_config

#=================================================
# INSTALL RENEW CERT
#=================================================

renew_cert_repo="https://gitlab.domainepublic.net/Neutrinet/renew_cert.git"
renew_cert_version=$(jq .version ../manifest.json -r -e | cut -d '~' -f 1)
renew_cert_path="$opt_path/renew_cert"
renew_cert_cron_script="renew_cert_cron.sh"

ynh_script_progression "Installing automatic VPN certificate renewal…"

ynh_exec_warn_less git clone $renew_cert_repo $renew_cert_path
ynh_exec_warn_less git -C $renew_cert_path checkout $renew_cert_version

# We wrap the python3 script that actually renew the VPN certificate
# This wrapper will be used as a daily cron task
cp ../conf/$renew_cert_cron_script $renew_cert_path/$renew_cert_cron_script

ynh_script_progression "Setting up permissions"
chown -R $app_user: $opt_path

chmod 0755 $renew_cert_path/$renew_cert_cron_script
chown root: $renew_cert_path/$renew_cert_cron_script

#=================================================
# SETTING UP CRONTAB
#=================================================

ynh_script_progression "Setting up cron job for certificate renewal…"

cat <<EOF > /etc/cron.daily/$app-renew-cert
#!/bin/bash
cd $renew_cert_path
$renew_cert_path/$renew_cert_cron_script -q
EOF

chown root:root /etc/cron.daily/$app-renew-cert
chmod 0755 /etc/cron.daily/$app-renew-cert

#=================================================
# FINALIZATION
#=================================================

ynh_script_progression "Checking certificates…"

# (This is expected to fail during CI tests because no credential available)
if [[ ${PACKAGE_CHECK_EXEC:-0} -eq 0 ]]
then
    /etc/cron.daily/$app-renew-cert
fi
