#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers
source _common.sh

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path_url)
app_user=$(ynh_app_setting_get $app app_user)
www_path=$(ynh_app_setting_get $app www_path)
opt_path=$(ynh_app_setting_get $app opt_path)

# There are two ways to get the version:
# - before 0.3.0~ynh1: version is only stored in app settings
# - after 0.3.0~ynh1: version is only stored in the manifest
# We don't use ynh_app_upstream_version, because it would return "null"
# when the version isn't in the manifest
manifest=/etc/yunohost/apps/$app/manifest.json
version=$(jq '.version // empty' -r -e $manifest || ynh_app_setting_get $app version)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

if [[ -z $www_path ]]; then
  www_path=/var/www/$app
  ynh_app_setting_set $app www_path $www_path

  mkdir -p $www_path
fi

if [[ -z $opt_path ]]; then
  opt_path=/opt/$app
  ynh_app_setting_set $app opt_path $opt_path

  mkdir -p $opt_path
fi

if [[ -z $app_user ]]; then
  app_user=$app
  ynh_app_setting_set $app app_user $app_user
fi

if [[ -z $path_url ]]; then
  path_url=$(ynh_app_setting_get $app path)

  if [[ -z $path_url ]]; then
    ynh_die "Missing path url!"
  else
    ynh_app_setting_set $app path_url $path_url
    ynh_app_setting_delete $app path
  fi
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

ynh_print_info "Creating backup..."

ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

if [[ $version < "0.3.0~ynh1" ]]; then
  ynh_app_setting_delete $app version
  ynh_system_user_create --username $app_user --home_dir $www_path

  ynh_print_info "Upgrading dependencies..."

  ynh_package_update
  ynh_install_app_dependencies python3-venv libssl-dev libffi-dev python3-dev
fi

#=================================================
# PULL CHANGES AND SPECIFIC SETUP
#=================================================
# REINSTALL STATIC FILES
#=================================================

ynh_print_info "Installing static site..."

cp -r ../sources/. $www_path
chown -R $app_user: $www_path

sed -i "s@PATHTOCHANGE@$path_url@g" ../conf/nginx.conf
sed -i "s@ALIASTOCHANGE@$www_path@g" ../conf/nginx.conf

cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

nginx -tq
service nginx reload

#=================================================
# REINSTALL RENEW CERT
#=================================================

ynh_print_info "Installing automatic VPN certificate renewal..."

renew_cert_repo="https://github.com/neutrinet/renew_cert"
renew_cert_version=$(jq .version ../manifest.json -r -e | cut -d '~' -f 1)
renew_cert_path="$opt_path/renew_cert"
renew_cert_virtualenv="$renew_cert_path/ve"
renew_cert_python="$renew_cert_virtualenv/bin/python"
renew_cert_cron_script="renew_cert_cron.sh"

if [[ ! -e $renew_cert_path ]]; then
  git clone $renew_cert_repo $renew_cert_path
else
  git -C $renew_cert_path fetch -t
fi

git -C $renew_cert_path checkout $renew_cert_version

# We wrap the python3 script that actually renew the VPN certificate
# This wrapper will be used as a daily cron task
cp $renew_cert_cron_script $renew_cert_path/$renew_cert_cron_script

# From now on we work in the renew_cert directory
cd $renew_cert_path

if [[ ! -e $renew_cert_python \
    || $($renew_cert_python --version 2>&1 | grep -q "Python 2") ]]; then
  rm -rf $renew_cert_virtualenv
  # We need system site packages otherwise moulinette is broken
  python3 -m venv $renew_cert_virtualenv --system-site-packages
fi
ve/bin/pip install wheel
ve/bin/pip install -r requirements.txt

ynh_print_info "Setting up permissions"
chown -R $app_user: $opt_path

chmod 755 $renew_cert_cron_script
chown root: $renew_cert_cron_script

#=================================================
# SETTING UP CRONTAB
#=================================================

ynh_print_info "Setting up cron job for renewal..."

cat <<EOF > /etc/cron.daily/$app-renew-cert
#!/bin/bash
cd $renew_cert_path
RENEW_CERT_PYTHON="$renew_cert_python" $renew_cert_path/$renew_cert_cron_script
EOF

chown root:root /etc/cron.daily/$app-renew-cert
chmod 0755 /etc/cron.daily/$app-renew-cert

#=================================================
# FINALIZATION
#=================================================

ynh_print_info "Checking certificates..."
/etc/cron.daily/$app-renew-cert
